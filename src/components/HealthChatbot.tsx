import React, { useState, useRef, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { MessageSquare, Mic, MicOff, Send, Volume2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  language?: string;
}

interface HealthChatbotProps {
  selectedLanguage: string;
  onLanguageChange: (language: string) => void;
}

const HealthChatbot: React.FC<HealthChatbotProps> = ({ selectedLanguage, onLanguageChange }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: selectedLanguage === 'hi' 
        ? '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£, ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§'
        : 'Hello! I am your health assistant. I can provide information about vaccination, disease symptoms, and health tips.',
      isUser: false,
      timestamp: new Date(),
      language: selectedLanguage
    }
  ]);
  
  const [currentMessage, setCurrentMessage] = useState('');
  const [isListening, setIsListening] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Healthcare FAQ responses in multiple languages
  const healthResponses: Record<string, Record<string, string>> = {
    en: {
      'vaccination schedule': 'Children should get vaccinated according to India\'s National Immunization Schedule:\n\n‚Ä¢ At birth: BCG, OPV-0, Hepatitis B-0\n‚Ä¢ 6 weeks: OPV-1, DPT-1, Hepatitis B-1, Hib-1\n‚Ä¢ 10 weeks: OPV-2, DPT-2, Hib-2\n‚Ä¢ 14 weeks: OPV-3, DPT-3, Hib-3\n‚Ä¢ 9 months: Measles-1, JE-1\n\nüí° Visit your nearest government health center for free vaccines.',
      'dengue symptoms': 'Dengue symptoms include:\n\n‚Ä¢ Sudden high fever\n‚Ä¢ Severe headache\n‚Ä¢ Pain behind eyes\n‚Ä¢ Muscle and joint pain\n‚Ä¢ Red rash on skin\n\n‚ö†Ô∏è If you have these symptoms, go to a hospital immediately.',
      'prevent diseases': 'To prevent seasonal diseases:\n\n‚Ä¢ Drink clean, boiled water\n‚Ä¢ Wash hands with soap before eating\n‚Ä¢ Use mosquito nets\n‚Ä¢ Cover stored water\n‚Ä¢ Eat fresh fruits and vegetables\n‚Ä¢ Avoid outside food during monsoon',
      'why vaccines important': 'Vaccines protect against life-threatening diseases like polio, measles, TB, diphtheria, and whooping cough. They save lives and are free at government hospitals.',
      'default': 'I can help you with vaccination schedules, disease symptoms, and preventive healthcare tips. Please ask me about specific health topics.\n\n‚ö†Ô∏è This information is for awareness only. For medical advice, please consult a doctor.'
    },
    hi: {
      'vaccination schedule': '‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•ã ‡§≠‡§æ‡§∞‡§§ ‡§ï‡•á ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ü‡•Ä‡§ï‡•á ‡§≤‡§ó‡§µ‡§æ‡§®‡•á ‡§ö‡§æ‡§π‡§ø‡§è:\n\n‚Ä¢ ‡§ú‡§®‡•ç‡§Æ ‡§ï‡•á ‡§∏‡§Æ‡§Ø: ‡§¨‡•Ä‡§∏‡•Ä‡§ú‡•Ä, ‡§ì‡§™‡•Ä‡§µ‡•Ä-0, ‡§π‡•á‡§™‡•á‡§ü‡§æ‡§á‡§ü‡§ø‡§∏ ‡§¨‡•Ä-0\n‚Ä¢ 6 ‡§∏‡§™‡•ç‡§§‡§æ‡§π: ‡§ì‡§™‡•Ä‡§µ‡•Ä-1, ‡§°‡•Ä‡§™‡•Ä‡§ü‡•Ä-1, ‡§π‡•á‡§™‡•á‡§ü‡§æ‡§á‡§ü‡§ø‡§∏ ‡§¨‡•Ä-1, ‡§π‡§ø‡§¨-1\n‚Ä¢ 10 ‡§∏‡§™‡•ç‡§§‡§æ‡§π: ‡§ì‡§™‡•Ä‡§µ‡•Ä-2, ‡§°‡•Ä‡§™‡•Ä‡§ü‡•Ä-2, ‡§π‡§ø‡§¨-2\n‚Ä¢ 14 ‡§∏‡§™‡•ç‡§§‡§æ‡§π: ‡§ì‡§™‡•Ä‡§µ‡•Ä-3, ‡§°‡•Ä‡§™‡•Ä‡§ü‡•Ä-3, ‡§π‡§ø‡§¨-3\n‚Ä¢ 9 ‡§Æ‡§π‡•Ä‡§®‡•á: ‡§ñ‡§∏‡§∞‡§æ-1, ‡§ú‡•á‡§à-1\n\nüí° ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§ü‡•Ä‡§ï‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ ‡§ú‡§æ‡§è‡§Ç‡•§',
      'dengue symptoms': '‡§°‡•á‡§Ç‡§ó‡•Ç ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£:\n\n‚Ä¢ ‡§Ö‡§ö‡§æ‡§®‡§ï ‡§§‡•á‡§ú ‡§¨‡•Å‡§ñ‡§æ‡§∞\n‚Ä¢ ‡§∏‡§ø‡§∞ ‡§Æ‡•á‡§Ç ‡§§‡•á‡§ú ‡§¶‡§∞‡•ç‡§¶\n‚Ä¢ ‡§Ü‡§Ç‡§ñ‡•ã‡§Ç ‡§ï‡•á ‡§™‡•Ä‡§õ‡•á ‡§¶‡§∞‡•ç‡§¶\n‚Ä¢ ‡§Æ‡§æ‡§Ç‡§∏‡§™‡•á‡§∂‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§ú‡•ã‡§°‡§º‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶\n‚Ä¢ ‡§§‡•ç‡§µ‡§ö‡§æ ‡§™‡§∞ ‡§≤‡§æ‡§≤ ‡§ö‡§ï‡§§‡•ç‡§§‡•á\n\n‚ö†Ô∏è ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§Æ‡•á‡§Ç ‡§Ø‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§π‡•à‡§Ç, ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ú‡§æ‡§è‡§Ç‡•§',
      'prevent diseases': '‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:\n\n‚Ä¢ ‡§∏‡§æ‡§´, ‡§â‡§¨‡§≤‡§æ ‡§π‡•Å‡§Ü ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§ñ‡§æ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡§æ‡§¨‡•Å‡§® ‡§∏‡•á ‡§π‡§æ‡§• ‡§ß‡•ã‡§è‡§Ç\n‚Ä¢ ‡§Æ‡§ö‡•ç‡§õ‡§∞‡§¶‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•ã ‡§¢‡§ï‡§ï‡§∞ ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§§‡§æ‡§ú‡•á ‡§´‡§≤ ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç ‡§ñ‡§æ‡§è‡§Ç\n‚Ä¢ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§π‡§∞ ‡§ï‡§æ ‡§ñ‡§æ‡§®‡§æ ‡§® ‡§ñ‡§æ‡§è‡§Ç',
      'why vaccines important': '‡§ü‡•Ä‡§ï‡•á ‡§™‡•ã‡§≤‡§ø‡§Ø‡•ã, ‡§ñ‡§∏‡§∞‡§æ, ‡§ü‡•Ä‡§¨‡•Ä, ‡§°‡§ø‡§™‡•ç‡§•‡•Ä‡§∞‡§ø‡§Ø‡§æ ‡§î‡§∞ ‡§ï‡§æ‡§≤‡•Ä ‡§ñ‡§æ‡§Ç‡§∏‡•Ä ‡§ú‡•à‡§∏‡•Ä ‡§ú‡§æ‡§®‡§≤‡•á‡§µ‡§æ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡•á ‡§ú‡•Ä‡§µ‡§® ‡§¨‡§ö‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§',
      'default': '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä, ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§\n\n‚ö†Ô∏è ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á‡§µ‡§≤ ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§'
    }
  };

  const getHealthResponse = (message: string): string => {
    const lang = selectedLanguage === 'hi' ? 'hi' : 'en';
    const responses = healthResponses[lang];
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('vaccination') || lowerMessage.includes('vaccine') || lowerMessage.includes('‡§ü‡•Ä‡§ï‡§æ')) {
      return responses['vaccination schedule'];
    }
    if (lowerMessage.includes('dengue') || lowerMessage.includes('‡§°‡•á‡§Ç‡§ó‡•Ç')) {
      return responses['dengue symptoms'];
    }
    if (lowerMessage.includes('prevent') || lowerMessage.includes('‡§¨‡§ö‡§æ‡§µ')) {
      return responses['prevent diseases'];
    }
    if (lowerMessage.includes('important') || lowerMessage.includes('‡§ú‡§∞‡•Ç‡§∞‡•Ä')) {
      return responses['why vaccines important'];
    }
    
    return responses['default'];
  };

  const handleSendMessage = async () => {
    if (!currentMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: currentMessage,
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsLoading(true);

    // Simulate AI response delay
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getHealthResponse(currentMessage),
        isUser: false,
        timestamp: new Date(),
        language: selectedLanguage
      };

      setMessages(prev => [...prev, botResponse]);
      setIsLoading(false);

      // Text-to-speech for bot response
      if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(botResponse.text);
        utterance.lang = selectedLanguage === 'hi' ? 'hi-IN' : 'en-IN';
        utterance.rate = 0.8;
        speechSynthesis.speak(utterance);
      }
    }, 1000);
  };

  const startListening = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      toast({
        title: "Speech recognition not supported",
        description: "Please type your message instead.",
        variant: "destructive"
      });
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    
    recognition.lang = selectedLanguage === 'hi' ? 'hi-IN' : 'en-IN';
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = () => {
      setIsListening(true);
    };

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setCurrentMessage(transcript);
      setIsListening(false);
    };

    recognition.onerror = () => {
      setIsListening(false);
      toast({
        title: "Speech recognition error",
        description: "Please try again or type your message.",
        variant: "destructive"
      });
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognition.start();
  };

  return (
    <Card className="h-[600px] flex flex-col bg-card shadow-card">
      {/* Chat Header */}
      <div className="p-4 border-b bg-gradient-medical text-primary-foreground rounded-t-lg">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-primary-light rounded-full flex items-center justify-center">
            <MessageSquare className="w-5 h-5 text-medical" />
          </div>
          <div>
            <h3 className="font-semibold">
              {selectedLanguage === 'hi' ? '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï' : 'Health Assistant'}
            </h3>
            <p className="text-sm opacity-90">
              {selectedLanguage === 'hi' ? '‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç' : 'Here to help with your health queries'}
            </p>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 p-4 overflow-y-auto space-y-4 bg-chat-bg">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.isUser ? 'justify-end' : 'justify-start'} animate-slide-up`}
          >
            <div
              className={`max-w-[80%] p-3 rounded-lg ${
                message.isUser
                  ? 'bg-chat-user text-white ml-auto'
                  : 'bg-card shadow-soft border'
              }`}
            >
              <p className="text-sm whitespace-pre-line">{message.text}</p>
              <span className="text-xs opacity-60 mt-1 block">
                {message.timestamp.toLocaleTimeString()}
              </span>
            </div>
          </div>
        ))}
        
        {isLoading && (
          <div className="flex justify-start animate-pulse">
            <div className="bg-card p-3 rounded-lg shadow-soft border">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-medical rounded-full animate-pulse-gentle"></div>
                <div className="w-2 h-2 bg-medical rounded-full animate-pulse-gentle" style={{animationDelay: '0.2s'}}></div>
                <div className="w-2 h-2 bg-medical rounded-full animate-pulse-gentle" style={{animationDelay: '0.4s'}}></div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t bg-card">
        <div className="flex gap-2">
          <Input
            value={currentMessage}
            onChange={(e) => setCurrentMessage(e.target.value)}
            placeholder={selectedLanguage === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§≤‡§ø‡§ñ‡•á‡§Ç...' : 'Type your health question...'}
            className="flex-1"
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          />
          <Button
            variant="outline"
            size="icon"
            onClick={startListening}
            disabled={isListening}
            className={`${isListening ? 'bg-medical text-white' : ''}`}
          >
            {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
          </Button>
          <Button 
            onClick={handleSendMessage}
            disabled={!currentMessage.trim() || isLoading}
            className="bg-medical hover:bg-medical-accent"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
        
        <div className="mt-2 text-xs text-muted-foreground text-center">
          {selectedLanguage === 'hi' 
            ? '‚ö†Ô∏è ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á‡§µ‡§≤ ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡•§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§'
            : '‚ö†Ô∏è This information is for awareness only. Consult a doctor for medical advice.'
          }
        </div>
      </div>
    </Card>
  );
};

export default HealthChatbot;